interface Command {
public void execute();

}
class Stereo {
public void On() {
System.out.println("Stereo is on");
}
}
class GarageDoor{
public void Up() {
System.out.println("Garage Door is Up");
}
}
class GarageDoorUpCommand implements Command{
GarageDoor c;
public GarageDoorUpCommand(GarageDoor l) {
this.c=l;
}
public void execute() {
c.Up();
}
}
class Light {
public void on() {
System.out.println("Light is on");
}
public void off() {
System.out.println("Light is Off");
}
}
class LightOnCommand implements Command {
Light light;
public LightOnCommand(Light light) {
this.light=light;
}
public void execute() {
light.on();
}
}
class LightOffCommand implements Command {
Light light;
public LightOffCommand(Light light) {
this.light=light;
}
public void execute() {
light.off();
}
}

class StereoOn implements Command {
Stereo s;
public StereoOn(Stereo l) {
this.s=l;
}
public void execute() {
s.On();
}
}
class SimpleRemoteControl{
Command slot;
public SimpleRemoteControl() {}
public void setCommand(Command command) {
slot = command;
}
public void buttonWasPressed() {
slot.execute();
}
}
public class Main{
public static void main(String[] args) {
SimpleRemoteControl remote=new SimpleRemoteControl();
Light light=new Light();
LightOnCommand lightOn=new LightOnCommand(light);
remote.setCommand(lightOn);
remote.buttonWasPressed();
LightOffCommand lightOff=new LightOffCommand(light);
remote.setCommand(lightOff);
remote.buttonWasPressed();
GarageDoor garageDoor=new GarageDoor();
GarageDoorUpCommand garageDoorUp=new GarageDoorUpCommand(garageDoor);
remote.setCommand(garageDoorUp);
remote.buttonWasPressed();

Stereo s1=new Stereo();
StereoOn s2=new StereoOn(s1);
remote.setCommand(s2);
remote.buttonWasPressed();
}
}











interface DuckB
{
public void oper();
}
class Fly implements DuckB
{
public void oper()
{
System.out.println("Duck Flies");
}
}
class Quack implements DuckB
{
public void oper()
{
System.out.println("Duck Sounds Quack Quack");
}
}
class Context
{
private DuckB s1;
public Context(DuckB p)
{
this.s1=p;
}
public void est()
{
s1.oper();
}

}
public class Duck
{
public static void main(String[] args) {
Context c1=new Context(new Fly());
System.out.println("Duck Behaviour");
c1.est();
c1=new Context(new Quack());
System.out.println("Duck Behaviour");
}
}






interface Car{
void assemble();
}
class BasicCar implements Car {
public void assemble()  {
System.out.println("Basic Car");
}
}
class CarDecorator implements Car{
protected Car decoratedCar;
public CarDecorator(Car c) {
this.decoratedCar=c;
}
public void assemble() {
this.decoratedCar.assemble();
}
}
class SportsCar extends CarDecorator{
public SportsCar(Car c) {
super(c);
}
public void assemble(){
super.assemble();
System.out.println(" + Sports Car Features");
}
}
class LuxuryCar extends CarDecorator{
public LuxuryCar(Car c){
super(c);
}
public void assemble() {
super.assemble();
System.out.println(" + Luxury Car Features");
}
}
public class Decorator {
public static void main(String[] args) {
Car s1= new SportsCar(new BasicCar());
System.out.print("Sports Car:");
s1.assemble();

System.out.println();

Car s2= new LuxuryCar(new BasicCar());
System.out.print("Luxury Car:");
s2.assemble();

System.out.println();

Car s=new SportsCar(new LuxuryCar(new BasicCar()));
System.out.println("Sports + Luxury Car:");
s.assemble();
}
}

