interface Command {
public void execute();

}
class Stereo {
public void On() {
System.out.println("Stereo is on");
}
}
class GarageDoor{
public void Up() {
System.out.println("Garage Door is Up");
}
}
class GarageDoorUpCommand implements Command{
GarageDoor c;
public GarageDoorUpCommand(GarageDoor l) {
this.c=l;
}
public void execute() {
c.Up();
}
}
class Light {
public void on() {
System.out.println("Light is on");
}
public void off() {
System.out.println("Light is Off");
}
}
class LightOnCommand implements Command {
Light light;
public LightOnCommand(Light light) {
this.light=light;
}
public void execute() {
light.on();
}
}
class LightOffCommand implements Command {
Light light;
public LightOffCommand(Light light) {
this.light=light;
}
public void execute() {
light.off();
}
}

class StereoOn implements Command {
Stereo s;
public StereoOn(Stereo l) {
this.s=l;
}
public void execute() {
s.On();
}
}
class SimpleRemoteControl{
Command slot;
public SimpleRemoteControl() {}
public void setCommand(Command command) {
slot = command;
}
public void buttonWasPressed() {
slot.execute();
}
}
public class Main{
public static void main(String[] args) {
SimpleRemoteControl remote=new SimpleRemoteControl();
Light light=new Light();
LightOnCommand lightOn=new LightOnCommand(light);
remote.setCommand(lightOn);
remote.buttonWasPressed();
LightOffCommand lightOff=new LightOffCommand(light);
remote.setCommand(lightOff);
remote.buttonWasPressed();
GarageDoor garageDoor=new GarageDoor();
GarageDoorUpCommand garageDoorUp=new GarageDoorUpCommand(garageDoor);
remote.setCommand(garageDoorUp);
remote.buttonWasPressed();

Stereo s1=new Stereo();
StereoOn s2=new StereoOn(s1);
remote.setCommand(s2);
remote.buttonWasPressed();
}
}











interface DuckB
{
public void oper();
}
class Fly implements DuckB
{
public void oper()
{
System.out.println("Duck Flies");
}
}
class Quack implements DuckB
{
public void oper()
{
System.out.println("Duck Sounds Quack Quack");
}
}
class Context
{
private DuckB s1;
public Context(DuckB p)
{
this.s1=p;
}
public void est()
{
s1.oper();
}

}
public class Duck
{
public static void main(String[] args) {
Context c1=new Context(new Fly());
System.out.println("Duck Behaviour");
c1.est();
c1=new Context(new Quack());
System.out.println("Duck Behaviour");
}
}






interface Car{
void assemble();
}
class BasicCar implements Car {
public void assemble()  {
System.out.println("Basic Car");
}
}
class CarDecorator implements Car{
protected Car decoratedCar;
public CarDecorator(Car c) {
this.decoratedCar=c;
}
public void assemble() {
this.decoratedCar.assemble();
}
}
class SportsCar extends CarDecorator{
public SportsCar(Car c) {
super(c);
}
public void assemble(){
super.assemble();
System.out.println(" + Sports Car Features");
}
}
class LuxuryCar extends CarDecorator{
public LuxuryCar(Car c){
super(c);
}
public void assemble() {
super.assemble();
System.out.println(" + Luxury Car Features");
}
}
public class Decorator {
public static void main(String[] args) {
Car s1= new SportsCar(new BasicCar());
System.out.print("Sports Car:");
s1.assemble();

System.out.println();

Car s2= new LuxuryCar(new BasicCar());
System.out.print("Luxury Car:");
s2.assemble();

System.out.println();

Car s=new SportsCar(new LuxuryCar(new BasicCar()));
System.out.println("Sports + Luxury Car:");
s.assemble();
}
}



class Volt {
    private int volts;
    public Volt(int v) { this.volts=v; }
    public int getVolts() { return volts; }
    public void setVolts(int volts) { this.volts = volts; }
}
class Socket {
    public Volt getVolt(){ return new Volt(120); }
}
interface SocketAdapter {
    public Volt get120Volt();
    public Volt get12Volt();
    public Volt get3Volt();
}
class SocketClassAdapterImpl extends Socket implements SocketAdapter {
    @Override
    public Volt get120Volt() {
        return getVolt();
    }
    @Override
    public Volt get12Volt() {
        Volt v = getVolt();
        return convertVolt(v,10);
    }
    @Override
    public Volt get3Volt() {
        Volt v = getVolt();
        return convertVolt(v,40);
    }
    private Volt convertVolt(Volt v, int i) {
        return new Volt(v.getVolts()/i);
    }
}

class SocketObjectAdapterImpl implements SocketAdapter {
    
    private Socket sock = new Socket();
    @Override
    public Volt get120Volt() {
        return sock.getVolt();
    }
    @Override
    public Volt get12Volt() {
        Volt v = sock.getVolt();
        return convertVolt(v,10);
    }
    @Override
    public Volt get3Volt() {
        Volt v = sock.getVolt();
        return convertVolt(v,40);
    }
    private Volt convertVolt(Volt v, int i) {
        return new Volt(v.getVolts()/i);
    }
}
public class min {
    public static void main(String[] args) {
        testClassAdapter();
        testObjectAdapter();
    }
    private static void testObjectAdapter() {
        SocketAdapter sockAdapter = new SocketObjectAdapterImpl();
        Volt v3 = getVolt(sockAdapter,3);
        Volt v12 = getVolt(sockAdapter,12);
        Volt v120 = getVolt(sockAdapter,120);
        System.out.println("v3 volts using Object Adapter="+v3.getVolts());
        System.out.println("v12 volts using Object Adk.8apter="+v12.getVolts());
        System.out.println("v120 volts using Object Adapter="+v120.getVolts());
    }
    private static void testClassAdapter() {
        SocketAdapter sockAdapter = new SocketClassAdapterImpl();
        Volt v3 = getVolt(sockAdapter,3);
        Volt v12 = getVolt(sockAdapter,12);
        Volt v120 = getVolt(sockAdapter,120);
        System.out.println("v3 volts using Class Adapter="+v3.getVolts());
        System.out.println("v12 volts using Class Adapter="+v12.getVolts());
        System.out.println("v120 volts using Class Adapter="+v120.getVolts());
    }
    private static Volt getVolt(SocketAdapter sockAdapter, int i) {
        switch (i){
            case 3: return sockAdapter.get3Volt();
            case 12: return sockAdapter.get12Volt();
            case 120: return sockAdapter.get120Volt();
            default: return sockAdapter.get120Volt();
        }
    }
}
